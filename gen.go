//+build generate

package main

// gen.go is based on the Lorca embed.go, however since that function
// does not use buffered io, embedding large files is painful.

import (
	"bufio"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
)

// Write a file which corresponds to an asset file
func writeRegister(w io.Writer, serveFile string, b []byte) {
	fmt.Fprintf(w, `
	Register(%q, []byte{
`, serveFile)

	for i := 0; i < len(b); i++ {
		if i > 0 {
			fmt.Fprintf(w, `, `)
		}
		fmt.Fprintf(w, `0x%02x`, b[i])
	}
	fmt.Fprintln(w, `})
`)
}

func writeIndividualFile(pkg string, assetFile string, serveFile string, b []byte) error {
	log.Println("generating ", serveFile)
	wf, err := os.Create(assetFile)
	if err != nil {
		return err
	}
	defer wf.Close()
	w := bufio.NewWriter(wf)

	fmt.Fprintf(w, `// Code generated by Lorca. DO NOT EDIT.
package %s

func init() {
`, pkg)

	writeRegister(w, serveFile, b)
	fmt.Fprintln(w, `
}
`)
	w.Flush()
	return nil
}

/*
// NOTE: When embedding using multiple files, go does not appear to always link
// all the files in the package. Or maybe there was a bug in my build command.
// either way, the single file variant is safer.

// Embed is a helper function that embeds assets from the given directories
// into a Go source file. It is designed to be called from some generator
// script, see example project to find out how it can be used.
func EmbedDifferentFiles(pkg string, outputDir string, dirs ...string) error {

	// Make a Regex to say we only want letters and numbers
	reg := regexp.MustCompile("[^a-zA-Z0-9_]+")

	for _, dir := range dirs {
		filepath.Walk(dir, func(path string, info os.FileInfo, err error) error {
			if info.IsDir() {
				return nil
			}
			b, err := ioutil.ReadFile(path)
			if err != nil {
				return err
			}
			serveFile := strings.TrimPrefix(filepath.ToSlash(path), dir)
			assetFile := "assets_" + reg.ReplaceAllString(serveFile, "_") + ".go"
			writeIndividualFile(pkg, filepath.Join(outputDir, assetFile), serveFile, b)
			return nil
		})
	}
	return nil
}
*/

// Embed is a helper function that embeds assets from the given directories
// into a Go source file. It is designed to be called from some generator
// script, see example project to find out how it can be used.
func EmbedSingleFile(pkg string, outputFile string, dirs ...string) error {
	log.Println("generating ", outputFile)
	wf, err := os.Create(outputFile)
	if err != nil {
		return err
	}
	defer wf.Close()
	w := bufio.NewWriter(wf)

	// TODO: Consider inlining fs.go as well.

	fmt.Fprintf(w, `// Code generated by edgolang. DO NOT EDIT.
package %s

func init() {`, pkg)

	for _, dir := range dirs {
		filepath.Walk(dir, func(path string, info os.FileInfo, err error) error {
			if info.IsDir() {
				return nil
			}
			b, err := ioutil.ReadFile(path)
			if err != nil {
				return err
			}
			serveFile := strings.TrimPrefix(filepath.ToSlash(path), dir)
			writeRegister(w, serveFile, b)
			return nil
		})
	}

	fmt.Fprintln(w, `
}
`)
	w.Flush()
	return nil
}

func main() {
	// You can also run "npm build" or webpack here, or compress assets, or
	// generate manifests, or do other preparations for your assets.
	EmbedSingleFile("assets", "assets/generated.go", "resources/www")
}
